@page "/call-js"
@using JavaScriptInteraction.Models
@inject IJSRuntime JS
@implements IAsyncDisposable

<h3>CallJS</h3>
<div class="d-flex flex-column gap-3">
    <div>
        <div>Results: @PredictableResult</div>
        <button class="btn btn-primary" @onclick="CallPredictableFunctionAsync">Call Predictable Function</button>
    </div>
    <div>
        <div>Results: @UnpredictableResult</div>
        <button class="btn btn-primary" @onclick="CallUnpredictableFunctionAsync">Call Unpredictable Function</button>
    </div>
    <div>
        <button class="btn btn-primary" @onclick="PassPrimitiveDataToFunctionAsync">Pass Primitive Data To Function</button>
    </div>
</div>
<div>
    <button class="btn btn-primary" @onclick="PassObjectDataToFunctionAsync">Pass Object To Function</button>
    <div>
        <button class="btn btn-primary" @onclick="PassReferenceDataToFunctionAsync">Pass Reference To Function</button>
    </div>
</div>

@code {
    private Lazy<IJSObjectReference> ExampleModule = new();
    public string PredictableResult { get; set; } = "";
    public string UnpredictableResult { get; set; } = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ExampleModule = new(await JS.InvokeAsync<IJSObjectReference>("import", "./js/example.js"));
        }
    }

    public async Task CallPredictableFunctionAsync()
    {
        PredictableResult = await ExampleModule.Value.InvokeAsync<string>("predictableResult");
    }

    public async Task PassObjectDataToFunctionAsync()
    {
        var instanceToPass = new ExampleClass()
            {
                ExampleString = "Blazor School",
                ExampleInt = 100,
                ExampleDate = DateTime.Now
            };

        await ExampleModule.Value.InvokeVoidAsync("methodWithObjectParameter", instanceToPass);
    }

    public async Task PassReferenceDataToFunctionAsync()
    {
        var instanceToPass = new ExampleClass()
            {
                ExampleString = "Blazor School",
                ExampleInt = 100,
                ExampleDate = DateTime.Now
            };

        var wrappedInstance = DotNetObjectReference.Create<ExampleClass>(instanceToPass);
        await ExampleModule.Value.InvokeVoidAsync("methodWithReferenceParameter", wrappedInstance);
    }

    public async Task PassPrimitiveDataToFunctionAsync()
    {
        await ExampleModule.Value.InvokeVoidAsync("methodWithPrimitiveParameters", "Blazor School", 5, DateTime.Now);
    }

    public async Task CallUnpredictableFunctionAsync()
    {
        try
        {
            dynamic unpredictableResult = await ExampleModule.Value.InvokeAsync<dynamic>("unpredictableResult");
            UnpredictableResult = unpredictableResult.ToString();
        }
        catch (Exception ex)
        {
            UnpredictableResult = ex.Message;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (ExampleModule.IsValueCreated)
        {
            await ExampleModule.Value.DisposeAsync();
        }
    }
}